import cv2 as cv
import numpy as np

pic1 = cv.imread('pic1.jpg')

cv.imshow('pic1', pic1)
gray = cv.cvtColor(pic1, cv.COLOR_BGR2GRAY)
cv.imshow('Gray', gray)
cv.waitKey(0)

pic1 = cv.imread('pic1.jpg')
blur3 = cv.GaussianBlur(pic1, (3, 3), cv.BORDER_DEFAULT)
blur11 = cv.GaussianBlur(pic1, (11, 11), cv.BORDER_DEFAULT)
cv.imshow('pic1', pic1)
cv.imshow('Blur3', blur3)
cv.imshow('Blur11', blur11)
cv.waitKey(0)

pic2 = cv.imread('pic2.jpg')

cv.imshow('pic2', pic2)
canny = cv.Canny(pic2, 125, 175)
cv.imshow('Edges', canny)
blur = cv.GaussianBlur(pic2, (3, 3), cv.BORDER_DEFAULT) 
canny = cv.Canny(blur, 125, 175)
cv.imshow('Edges_blured', canny)
cv.waitKey(0)

pic2 = cv.imread('pic2.jpg')

cv.imshow('pic2', pic2)

resize = cv.resize(pic2, (2*pic2.shape[1], pic2.shape[0]), interpolation = cv.INTER_AREA)
cv.imshow('Resize_bigger', resize)
pic2 = cv.imread('pic2.jpg')
resize = cv.resize(pic2, (pic2.shape[1], pic2.shape[0]//2), interpolation = cv.INTER_CUBIC)
cv.imshow('Resize_smaller', resize)
cv.waitKey(0)

def translate(img, x, y): #image, # of pixels you want to shift in x and y axes
    
    transMat = np.float32([[1, 0, x], [0, 1, y]]) #translation matrix
    dimentions = (img.shape[1], img.shape[0]) #(width, height)
    
    return cv.warpAffine(img, transMat, dimentions)

def rotate(img, angle, rotPoint = None):
    
    (height, width) = (img.shape[0], img.shape[1])
    
    if rotPoint == None:
        rotPoint = (width//2, height//2)
        
    rotMat = cv.getRotationMatrix2D(rotPoint, angle, 1.0)
    dimentions = (width, height)
    
    return cv.warpAffine(img, rotMat, dimentions)

pic2 = cv.imread('pic2.jpg')
cv.imshow('pic2', pic2)

translated = translate(pic2, 200, 50)
cv.imshow('translated', translated)

rotated = rotate(translated, 50)
cv.imshow('rotated', rotated)

flipped = cv.flip(rotated, -1)
cv.imshow('flipped', flipped)

cv.waitKey(0)

pic3 = cv.imread('pic3.jpg')

canny = cv.Canny(pic3, 75, 75)
contours, hierarchies = cv.findContours(canny, cv.RETR_LIST, cv.CHAIN_APPROX_NONE)
blank = np.zeros(pic3.shape, dtype = 'uint8')
cv.drawContours(blank, contours, -1, (0, 0, 255), 1)
cv.imshow('countur', blank)

gray = cv.cvtColor(pic3, cv.COLOR_BGR2GRAY)
blur = cv.GaussianBlur(gray, (3, 3), cv.BORDER_DEFAULT) 
canny3 = cv.Canny(blur, 75, 75)
contours, hierarchies = cv.findContours(canny3, cv.RETR_LIST, cv.CHAIN_APPROX_NONE)
blank = np.zeros(pic3.shape, dtype = 'uint8')
cv.drawContours(blank, contours, -1, (0, 0, 255), 1)
cv.imshow('countur by blured', blank)

cv.waitKey(0)
